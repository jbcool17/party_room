const BallRoomRender = React.createClass({
	render(){
		var scene, camera, renderer;
		var cubeGeometry, cube, material;
		var sphereGeometry, sphere;
		var objects = [];
		var lastTime;
		var onRenderFcts = [];

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Setup Scene and Effects
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		scene = new THREE.Scene();

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//CAMERA
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);
		camera.position.x = 170;
		camera.position.y = 100;
		camera.position.z = 0;
		camera.rotation.x = 0;
		camera.rotation.y = 2;
		camera.rotation.z = 0;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Setup Renderer
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		renderer = new THREE.WebGLRenderer();
		renderer.setSize(window.innerWidth, window.innerHeight);
		renderer.shadowMap.enabled = true;
		renderer.shadowMap.type = THREE.BasicShadowMap;
		renderer.setPixelRatio( window.devicePixelRatio );

		renderer.setClearColor(0xffffff, 1);

		$domElement = $(renderer.domElement);
		$domElement.addClass('sceneCanvas');

		document.body.insertBefore($domElement[0], document.body.firstChild);

		controls = new THREE.OrbitControls( camera, renderer.domElement );
		controls.autoRotate = true;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//LIGHTS
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		var ambient = new THREE.AmbientLight( 0xffffff );
		        scene.add( ambient );

		var pointLight = new THREE.PointLight( 0xffffff, 2 );
			pointLight.position.y = 100;
			pointLight.intensity = .8;
			scene.add( pointLight );

		var spotLight = new THREE.SpotLight( 0xaaaaaa);
			spotLight.position.set( 0, 350, 0 );
			spotLight.castShadow = true;
			
			scene.add( spotLight );

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//OBJECTS
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		var phong  = new THREE.MeshPhongMaterial( { color: 0xffffff, opacity: 0.5}); //0x111111
		
		//GROUND
		var planeGeometry = new THREE.PlaneGeometry( 500, 500, 100, 100 );
        	planeGeometry.rotateX( - Math.PI / 2 );


        var ground = new THREE.Mesh( planeGeometry, phong );
	        ground.position.y = -10;
	        ground.receiveShadow = true;
	        scene.add( ground );

		//Creating Grid of Spheres
		var sphereHoldAudio = [];

		var Z = 0;
		for (var i = 0; i < 10; i++ ) {
		    var X = 0;
		    for (var j = 0; j < 10; j ++ ) {
		      sphereGeometry = new THREE.SphereGeometry( 50, 16, 8 );
		      var material = new THREE.MeshBasicMaterial( { color: 0xaaffff, shininess: 100,
														    shading: THREE.SmoothShading, wireframe: true } );
		      mesh = new THREE.Mesh( sphereGeometry, material);
		      mesh.position.x = X - 70;
		      mesh.position.z = Z - 70;
		      mesh.scale.x = .1;
		      mesh.scale.y = .1;
		      mesh.scale.z = .1;
		      mesh.castShadow = true;
		      scene.add(mesh);
		      
		      sphereHoldAudio.push(mesh);
		      X +=20; 
		    }
		    Z += 20;
		  }



//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//RENDERER
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		var render = function() {

			    requestAnimationFrame(render);

			    var time = Date.now() * 0.00005;
			    h = (360 * (1.0 + time) % 360) / 360;
				
				//Rotate Spheres
			    for ( var i = 0; i < sphereHoldAudio.length; i++ ) {
			      
			    	sphereHoldAudio[i].rotation.x += 0.01;

			    }
				
				//Change Light Color
			    pointLight.color.setHSL(h, 0.5, 0.5);
			    
			    controls.update();
			    renderer.render(scene, camera);
		    
		};

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//AUDIO
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		var canvas, ctx, source, context, analyser, fbc_array, bars, bar_x, bar_width, bar_height;
		
		//Create Audio Object
		var audio = new Audio();
		audio.src = "<%= asset_path '2001_Strauss.mp3' %>";
		audio.controls = true;
		audio.loop = true;
		audio.autoplay = true;		

		// Initialize the audio player
		window.addEventListener("load", initAudioPlayer, false);
	
		//Audio Analyzer
		var frameLooper = function (){
		    window.requestAnimationFrame(frameLooper);

		    fbc_array = new Uint8Array(analyser.frequencyBinCount);
		    analyser.getByteFrequencyData(fbc_array);
		    //ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas
		    //ctx.fillStyle = '#00CCFF'; // Color of the bars
		    
		    for (var i = 0; i < fbc_array.length; i++) {
		        bar_x = i * 3;
		        bar_width = Math.random() * fbc_array[i] / 2;
		        bar_height = -fbc_array[i] / 2;
		        sphereHoldAudio[i].position.y = -1 * (bar_height + 1);
		        
		        
		        if ( bar_height < -90 ) {
					
					//Huge Spheres
					sphereHoldAudio[i].scale.x = -1 * (bar_height + 1);
					sphereHoldAudio[i].scale.y = -1 * (bar_height + 1);
					sphereHoldAudio[i].scale.z = -1 * (bar_height + 1);

		        } else if (bar_height < -30 ){
					
					//Changes Color and Sets Scale
		        	sphereHoldAudio[i].material.color.setHSL(h * bar_height, 0.5, 0.5);
		        	sphereHoldAudio[i].scale.x = .1;
					sphereHoldAudio[i].scale.y = .1;
					sphereHoldAudio[i].scale.z = .1;

		        } else {
					
		          	sphereHoldAudio[i].material.color.setHSL(h * bar_height, 0.5, 1);

		        }
		       
		    }
		}

		var initAudioPlayer = function (){
		    document.getElementById('audio_box').appendChild(audio);
		    
		    context = new AudioContext(); // AudioContext object instance
		    analyser = context.createAnalyser(); // AnalyserNode method
		    canvas = document.getElementById('analyser_render');
		    
		    // Re-route audio playback into the processing graph of the AudioContext
		    source = context.createMediaElementSource(audio); 
		    source.connect(analyser);
		    analyser.connect(context.destination);

		    //Start Analyzing
		    frameLooper();
		}

		$(document).ready(function() {

		  render();
		  initAudioPlayer();

		});


		return (<div></div>);
	}
}); 
